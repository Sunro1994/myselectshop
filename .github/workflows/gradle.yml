name: CI/CD github Actions & Docker

on:
  push:
    branches: ["master"]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v3

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경 설정(application-dev.yml 파일 생성)
      - name: Make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
          cat ./application-dev.yml  # 디버그용 출력
        shell: bash

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Docker Hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 빌드 & 푸시
      - name: Docker build & push to dev
        if: contains(github.ref, 'master')
        run: |
          docker build Dockerfile -t ${{ secrets.DOCKER_REPO}}/myselectshop:test .
          docker push ${{ secrets.DOCKER_REPO}}/myselectshop:test

      #  배포
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker rm -f dotorit-server  # 특정 컨테이너만 삭제
            sudo docker pull ${{ secrets.DOCKER_REPO}}/myselectshop:test
            sudo docker run -d -p 8080:8080 --name dotorit-server --env-file=/home/ubuntu/.env ${{ secrets.DOCKER_REPO}}/myselectshop:test
            sudo docker image prune -f  # 필요 없는 이미지 정리
